#############
# Gitignore #
#############
# [OVERVIEW] Ignoring specific files and folders when working with git:
# https://ru.hexlet.io/courses/intro_to_git/lessons/gitignore/theory_unit
#
# [INFO] Another tools as fd and ECLint are also used “.gitignore” to ignore folders and files:
# https://github.com/jednano/eclint/issues/128
# https://github.com/sharkdp/fd#features
#
# [INFO] Syntax of Git ignore patterns:
# https://www.atlassian.com/git/tutorials/saving-changes/gitignore
#
# [INFO] “.gitignore” boilerplates
# https://github.com/theadamlt/Sublime-Gitignore
#
# [INFO] I use values from boilerplates, not solely my personal values
# so as not to miss possibly necessary templates
#
# [NOTE] That ignore all files in folder “output”, use “output/”, not “/output” syntax!
# “/output” works for GitHub, but not documented and doesn’t work for eclint.


### Personal ###

# [INFO] I useSeparate repository for output site
output/
output/.git/

# Personal folder settings
desktop.ini

# Pelican cache
pelican_cache/
.sublime-grunt.cache


# [NOTE] I disable ignoring “package-lock.json”, because I migrate from “npm install” to “npm ci”.
# [LINK] “travis/travis-install.sh”
#
# [INFO] Not recommended add to “.gitignore” files as “Pipfile.lock” and “package-lock.json”:
# https://stackoverflow.com/a/46303305/5951529
# https://stackoverflow.com/a/44210813/5951529
#
# [NOTE] But I do it anyway, because:
# 1. I use latest packages versions, not specific
# 2. Extra big files in repository
Pipfile.lock
# package-lock.json

# [INFO] Peru cache
.peru/

# [INFO] Pelican third-party plugins installed via Peru
pelican-plugins/

# [INFO] Binary search file generated for Stork search in Pelican:
# https://github.com/pelican-plugins/search
search-index.st

# [INFO] Ignore TLS key generated by mkcert:
# https://stackoverflow.com/a/64240039/5951529
**/*.key


### Python ###

# Byte-compiled / optimized / DLL files
__pycache__
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/

# Translations
*.mo
*.pot

# Django stuff:
.static_storage/
.media/
local_settings.py

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# pyenv
.python-version

# celery beat schedule file
celerybeat-schedule

# SageMath parsed files
*.sage.py

# Environments
.env
.venv/
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/


### Node ###

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Typescript v1 declaration files
typings/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# next.js build output
.next
